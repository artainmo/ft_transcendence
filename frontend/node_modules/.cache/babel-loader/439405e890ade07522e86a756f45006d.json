{"ast":null,"code":"/* eslint-disable */\nimport { BALL_RADIUS, GAME_HEIGHT, GAME_WIDTH, PLAYER_HEIGHT, PLAYER_WIDTH } from \"./infos\";\n\nclass Ball {\n  /*\n  ** ---------------------------\n  ** Public\n  */\n  constructor() {\n    let r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : BALL_RADIUS;\n    let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    let vX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n    let vY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;\n    let color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"white\";\n    this.x = void 0;\n    this.y = void 0;\n    this.r = void 0;\n    this.speed = void 0;\n    this.velocityX = void 0;\n    this.velocityY = void 0;\n    this.color = void 0;\n    this.x = GAME_WIDTH / 2;\n    this.y = GAME_HEIGHT / 2;\n    this.r = r;\n    this.speed = s;\n    this.velocityX = vX;\n    this.velocityY = vY;\n    this.color = color;\n  }\n  /*\n  ** Getter\n  */\n\n\n  getX() {\n    return this.x;\n  }\n\n  getY() {\n    return this.y;\n  }\n\n  getRadius() {\n    return this.r;\n  }\n\n  getSpeed() {\n    return this.speed;\n  }\n\n  getVX() {\n    return this.velocityX;\n  }\n\n  getVY() {\n    return this.velocityY;\n  }\n\n  getColor() {\n    return this.color;\n  }\n  /*\n  ** Setter\n  */\n\n\n  setRadius(r) {\n    this.r = r;\n  }\n\n  setSpeed(s) {\n    this.speed = s;\n  }\n\n  setVX(vX) {\n    this.velocityX = vX;\n  }\n\n  setVY(vY) {\n    this.velocityY = vY;\n  }\n\n  setColor(c) {\n    this.color = c;\n  }\n  /*\n  ** Func\n  */\n\n\n  collision(player) {\n    var ptop = player.y;\n    var pbottom = player.y + PLAYER_HEIGHT;\n    var pleft = player.x;\n    var pright = player.x + PLAYER_WIDTH;\n    var btop = this.y - this.r;\n    var bbottom = this.y + this.r;\n    var bleft = this.x - this.r;\n    var bright = this.x + this.r;\n    return bright > pleft && bbottom > ptop && btop < pbottom && bleft < pright;\n  }\n\n  update(hMax, p1, p2) {\n    this.x += this.velocityX;\n    this.y += this.velocityY; //Vs ia\n\n    let computerLevel = 0.1;\n    p2.y += (this.y - (p2.y + PLAYER_HEIGHT / 2)) * computerLevel;\n    if (this.y + this.r > hMax || this.y - this.r < 0) this.velocityY = -this.velocityY;\n    let player = this.x < GAME_WIDTH / 2 ? p1 : p2;\n\n    if (this.collision(player)) {\n      var collidepoint = this.y - (player.y + PLAYER_HEIGHT / 2);\n      collidepoint = collidepoint / (PLAYER_HEIGHT / 2);\n      var angleRad = Math.PI / 4 * collidepoint;\n      var direction = this.x < GAME_WIDTH / 2 ? 1 : -1;\n      this.velocityX = direction * (this.speed * Math.cos(angleRad));\n      this.velocityY = this.speed * Math.sin(angleRad);\n      this.speed += 0.5;\n    }\n  }\n\n  resetBall() {\n    this.speed = 5;\n    this.velocityX = 5; //-this.velocityX;\n    //this.velocityY = 5;\n\n    this.x = GAME_WIDTH / 2;\n    this.y = GAME_HEIGHT / 2;\n  }\n  /*\n  ** ---------------------------\n  ** Private\n  */\n\n\n}\n\nexport default Ball;","map":{"version":3,"sources":["/Users/arthurtainmont/Documents/programming/ft_transcendence/frontend/src/pages/game/game/Ball.ts"],"names":["BALL_RADIUS","GAME_HEIGHT","GAME_WIDTH","PLAYER_HEIGHT","PLAYER_WIDTH","Ball","constructor","r","s","vX","vY","color","x","y","speed","velocityX","velocityY","getX","getY","getRadius","getSpeed","getVX","getVY","getColor","setRadius","setSpeed","setVX","setVY","setColor","c","collision","player","ptop","pbottom","pleft","pright","btop","bbottom","bleft","bright","update","hMax","p1","p2","computerLevel","collidepoint","angleRad","Math","PI","direction","cos","sin","resetBall"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\nimport { BALL_RADIUS, GAME_HEIGHT, GAME_WIDTH, PLAYER_HEIGHT, PLAYER_WIDTH } from \"./infos\";\nimport Player from \"./Player\";\n\nclass Ball\n{\n\t/*\n\t** ---------------------------\n\t** Public\n\t*/\n\tconstructor(r = BALL_RADIUS, s = 5, vX = 5, vY = 5, color = \"white\")\n\t{\n\t\tthis.x = GAME_WIDTH / 2;\n\t\tthis.y = GAME_HEIGHT / 2;\n\t\tthis.r = r;\n\t\tthis.speed = s;\n\t\tthis.velocityX = vX;\n\t\tthis.velocityY = vY;\n\t\tthis.color = color;\n\t}\n\n\t/*\n\t** Getter\n\t*/\n\tpublic getX() {return this.x;}\n\tpublic getY() {return this.y;}\n\tpublic getRadius() {return this.r;}\n\tpublic getSpeed() {return this.speed;}\n\tpublic getVX() {return this.velocityX;}\n\tpublic getVY() {return this.velocityY;}\n\tpublic getColor() {return this.color;}\n\t\n\t/*\n\t** Setter\n\t*/\n\tpublic setRadius(r: number) {this.r = r;}\n\tpublic setSpeed(s: number) {this.speed = s;}\n\tpublic setVX(vX: number) {this.velocityX = vX;}\n\tpublic setVY(vY: number) {this.velocityY = vY;}\n\tpublic setColor(c: string) {this.color = c;}\n\n\t/*\n\t** Func\n\t*/\n\tpublic collision(player: Player)\n\t{\n\t\tvar ptop = player.y;\n\t\tvar pbottom = player.y + PLAYER_HEIGHT;\n\t\tvar pleft = player.x;\n\t\tvar pright = player.x + PLAYER_WIDTH;\n\n\t\tvar btop = this.y - this.r;\n\t\tvar bbottom = this.y + this.r;\n\t\tvar bleft = this.x - this.r;\n\t\tvar bright = this.x + this.r;\n\n\t\treturn (bright > pleft && bbottom > ptop && btop < pbottom && bleft < pright);\n\t}\n\n\tpublic update(hMax: number, p1: Player, p2: Player)\n\t{\n\t\tthis.x += this.velocityX;\n\t\tthis.y += this.velocityY;\n\n\t\t//Vs ia\n\t\tlet computerLevel = 0.1;\n\t\tp2.y += (this.y - (p2.y + PLAYER_HEIGHT / 2)) * computerLevel;\n\n\t\tif (this.y + this.r > hMax || this.y - this.r < 0)\n\t\t\tthis.velocityY = -this.velocityY;\n\n\t\tlet player = (this.x < GAME_WIDTH / 2 ? p1 : p2);\n\n\t\tif (this.collision(player))\n\t\t{\n\t\t\tvar collidepoint = this.y - (player.y + PLAYER_HEIGHT/2);\n\t\t\tcollidepoint = collidepoint / (PLAYER_HEIGHT / 2);\n\n\t\t\tvar angleRad = (Math.PI/4) * collidepoint;\n\n\t\t\tvar direction = (this.x < GAME_WIDTH / 2 ? 1 : -1);\n\t\t\tthis.velocityX = direction * (this.speed * Math.cos(angleRad));\n\t\t\tthis.velocityY = this.speed * Math.sin(angleRad);\n\n\t\t\tthis.speed += 0.5;\n\t\t}\n\t}\n\n\tpublic resetBall()\n\t{\n\t\tthis.speed = 5;\n\t\tthis.velocityX = 5;//-this.velocityX;\n\t\t//this.velocityY = 5;\n\t\tthis.x = GAME_WIDTH / 2;\n\t\tthis.y = GAME_HEIGHT / 2;\n\t}\n\n\t/*\n\t** ---------------------------\n\t** Private\n\t*/\n\tprivate x: number;\n\tprivate y: number;\n\tprivate r: number;\n\tprivate speed: number;\n\tprivate velocityX: number;\n\tprivate velocityY: number;\n\tprivate color: string;\n}\n\nexport default Ball;"]},"metadata":{},"sourceType":"module"}