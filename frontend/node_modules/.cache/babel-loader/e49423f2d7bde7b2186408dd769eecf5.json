{"ast":null,"code":"var _jsxFileName = \"/Users/arthurtainmont/Documents/programming/ft_transcendence/frontend/src/pages/chat/chatChannelsView.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Chat from \"./chat\";\nimport chatChannelsClass from \"../../types/chatChannelsClass\";\nimport { dataBaseAccounts, dataBaseChannels } from \"../../types/database\"; // import { SocketContext } from \"../../../context/socket\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst JoinChannel = _ref => {\n  _s();\n\n  let {\n    account,\n    changeAccount,\n    changeChat\n  } = _ref;\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSearch = searchValue => {\n    let searchResults = [];\n    dataBaseChannels.forEach((item, index) => searchValue.length !== 0 && item.specific !== \"private\" && !account.chatChannels.some(elem => elem.dmOrChannel === \"channel\" && elem.name === item.name) && item.name.includes(searchValue) && searchResults.push(index));\n    setSearchText(searchValue);\n    setSearchResults(searchResults);\n  };\n\n  const onSubmitDM = channelIndex => {\n    let tmp = account.chatChannels;\n\n    if (dataBaseChannels[channelIndex].specific === \"password\" && dataBaseChannels[channelIndex].password !== password) {\n      setPassword(\"\");\n      return;\n    }\n\n    dataBaseChannels[channelIndex].users.push({\n      name: account.name,\n      administrator: false,\n      mute: false\n    });\n    tmp.push(dataBaseChannels[channelIndex]);\n    changeAccount({\n      chatChannels: tmp\n    });\n    changeChat(account.chatChannels.length - 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchText,\n      onChange: e => handleSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), searchResults.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dataBaseChannels[item].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"\\xA0\\xA0\\xA0\"\n      }, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          onSubmitDM(item);\n        },\n        children: \"Join\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"\\xA0\\xA0\\xA0\"\n      }, void 0, false), dataBaseChannels[item].specific === \"password\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(JoinChannel, \"7v5iUCvS6QTngjtPi1w6Vr5SrWQ=\");\n\n_c = JoinChannel;\n\nconst NewChannel = _ref2 => {\n  _s2();\n\n  let {\n    account,\n    changeAccount,\n    changeChat\n  } = _ref2;\n  const [name, setName] = useState(\"\");\n  const [nameAlreadyInUse, setNameAlreadyInUse] = useState(false);\n  const [specific, setSpecific] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const onSubmitChannel = () => {\n    if (account.chatChannels.some(elem => elem.dmOrChannel === \"channel\" && elem.name === name) || dataBaseChannels.some(elem => elem.name === name)) {\n      setName(\"\");\n      setNameAlreadyInUse(true);\n    } else {\n      let newChannel = new chatChannelsClass(\"channel\", specific, password, name, [], account.name, [{\n        name: account.name,\n        administrator: true,\n        mute: false\n      }]);\n      let tmp = account.chatChannels;\n      tmp.push(newChannel); // dataBaseChannels.push(newChannel); //Real database should exist so that no error occurs when leaving created channel\n\n      changeAccount({\n        chatChannels: tmp\n      });\n      changeChat(account.chatChannels.length - 1);\n      setNameAlreadyInUse(false);\n    }\n  };\n\n  const changeSpecific = newValue => {\n    setSpecific(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Channel name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        name: \"channelname\",\n        onChange: e => setName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"public\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"specific\",\n        onChange: () => changeSpecific(\"public\"),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"\\xA0\\xA0\\xA0\"\n      }, void 0, false), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"private\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"specific\",\n        onChange: () => changeSpecific(\"private\"),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"\\xA0\\xA0\\xA0\"\n      }, void 0, false), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"specific\",\n        onChange: () => changeSpecific(\"password\"),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), specific === \"password\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), nameAlreadyInUse && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Name already exists try another one\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        onClick: () => onSubmitChannel()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(NewChannel, \"n4IBqOriXWAFdYt7dVSBD43PBXQ=\");\n\n_c2 = NewChannel;\n\nconst NewDM = _ref3 => {\n  _s3();\n\n  let {\n    account,\n    changeAccount,\n    changeChat\n  } = _ref3;\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n\n  const handleSearch = searchValue => {\n    let searchResults = [];\n    dataBaseAccounts.forEach(item => searchValue.length !== 0 && !account.chatChannels.some(elem => elem.dmOrChannel === \"dm\" && elem.name === item[0]) && item[0].includes(searchValue) && item[0] !== account.name && searchResults.push(item));\n    setSearchText(searchValue);\n    setSearchResults(searchResults);\n  };\n\n  const onSubmitDM = name => {\n    let tmp = account.chatChannels;\n    tmp.push(new chatChannelsClass(\"dm\", \"non-block\", null, name, [], null, [{\n      name: account.name,\n      administrator: false,\n      mute: false\n    }, {\n      name: name,\n      administrator: false,\n      mute: false\n    }]));\n    changeAccount({\n      chatChannels: tmp\n    });\n    changeChat(account.chatChannels.length - 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchText,\n      onChange: e => handleSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), searchResults.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: item[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"\\xA0\\xA0\\xA0\"\n      }, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          onSubmitDM(item[0]);\n        },\n        children: \"Start DM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(NewDM, \"n+CcG2YHwAkWNw+bH53ITTCTB+E=\");\n\n_c3 = NewDM;\n\nconst ChatChannelsView = _ref4 => {\n  _s4();\n\n  let {\n    account,\n    changeAccount\n  } = _ref4;\n  const [newdm, setNewdm] = useState(false);\n  const [newchannel, setNewchannel] = useState(false);\n  const [joinchannel, setJoinchannel] = useState(false);\n  const [currentChat, setCurrentChat] = useState(null); //   const socket = useContext(SocketContext);\n  //   const afficher = (msg: string) =>\n  //     console.log(`Client: GOt user online msg => ${msg}`);\n  //   useEffect(() => {\n  //     // as soon as the component is mounted, do the following tasks:\n  //     // emit USER_ONLINE event\n  //     socket.emit(\"USER_ONLINE\", account.name);\n  //     // subscribe to socket events\n  //     socket.on(\"USER_ONLINE\", (msg: string) => {\n  //       afficher(msg);\n  //     });\n  //     return () => {\n  //       // before the component is destroyed\n  //       // unbind all event handlers used in this component\n  //       socket.off(\"USER_ONLINE\");\n  //     };\n  //   }, [socket]);\n\n  const changeChat = newChat => {\n    setNewchannel(false);\n    setNewdm(false);\n    setJoinchannel(false);\n    setCurrentChat(newChat);\n  };\n\n  if (currentChat !== null) {\n    return /*#__PURE__*/_jsxDEV(Chat, {\n      account: account,\n      changeAccount: changeAccount,\n      changeChat: changeChat,\n      chatIndex: currentChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setNewdm(!newdm);\n          setNewchannel(false);\n          setJoinchannel(false);\n        },\n        children: \"New DM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"\\xA0\\xA0\\xA0\"\n      }, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setNewchannel(!newchannel);\n          setNewdm(false);\n          setJoinchannel(false);\n        },\n        children: \"New Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"\\xA0\\xA0\\xA0\"\n      }, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setJoinchannel(!joinchannel);\n          setNewchannel(false);\n          setNewdm(false);\n        },\n        children: \"Join Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), newdm && /*#__PURE__*/_jsxDEV(NewDM, {\n        account: account,\n        changeAccount: changeAccount,\n        changeChat: changeChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this), newchannel && /*#__PURE__*/_jsxDEV(NewChannel, {\n        account: account,\n        changeAccount: changeAccount,\n        changeChat: changeChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this), joinchannel && /*#__PURE__*/_jsxDEV(JoinChannel, {\n        account: account,\n        changeAccount: changeAccount,\n        changeChat: changeChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), account.chatChannels.length ? account.chatChannels.map((item, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: () => changeChat(index),\n        children: `${item.name} -- ${item.dmOrChannel}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No chats\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s4(ChatChannelsView, \"5VblhkmEbty+0iKpxFw7Ygzht0k=\");\n\n_c4 = ChatChannelsView;\nexport default ChatChannelsView; // • Through the chat interface users should be able to ask other players to do a Pong\n// match\n// • Through the chat interface users must be able to see other players profiles\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"JoinChannel\");\n$RefreshReg$(_c2, \"NewChannel\");\n$RefreshReg$(_c3, \"NewDM\");\n$RefreshReg$(_c4, \"ChatChannelsView\");","map":{"version":3,"sources":["/Users/arthurtainmont/Documents/programming/ft_transcendence/frontend/src/pages/chat/chatChannelsView.tsx"],"names":["React","useState","Chat","chatChannelsClass","dataBaseAccounts","dataBaseChannels","JoinChannel","account","changeAccount","changeChat","searchResults","setSearchResults","searchText","setSearchText","password","setPassword","handleSearch","searchValue","forEach","item","index","length","specific","chatChannels","some","elem","dmOrChannel","name","includes","push","onSubmitDM","channelIndex","tmp","users","administrator","mute","e","target","value","map","NewChannel","setName","nameAlreadyInUse","setNameAlreadyInUse","setSpecific","onSubmitChannel","newChannel","changeSpecific","newValue","NewDM","ChatChannelsView","newdm","setNewdm","newchannel","setNewchannel","joinchannel","setJoinchannel","currentChat","setCurrentChat","newChat"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Chat from \"./chat\";\nimport accountType from \"../../types/accountType\";\nimport chatChannelsClass from \"../../types/chatChannelsClass\";\nimport { dataBaseAccounts, dataBaseChannels } from \"../../types/database\";\n// import { SocketContext } from \"../../../context/socket\";\n\ninterface chatProps2 {\n  account: accountType;\n  changeAccount: (newAccount: any) => void;\n  changeChat: (newChat: number | null) => void;\n}\n\ninterface chatProps {\n  account: accountType;\n  changeAccount: (newAccount: any) => void;\n  // backToPage: (newPage: string) => void\n}\n\nconst JoinChannel: React.FC<chatProps2> = ({\n  account,\n  changeAccount,\n  changeChat,\n}) => {\n  const [searchResults, setSearchResults] = useState<number[]>([]);\n  const [searchText, setSearchText] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n\n  const handleSearch: (searchValue: string) => void = (searchValue) => {\n    let searchResults: number[] = [];\n\n    dataBaseChannels.forEach(\n      (item, index) =>\n        searchValue.length !== 0 &&\n        item.specific !== \"private\" &&\n        !account.chatChannels.some(\n          (elem: any) =>\n            elem.dmOrChannel === \"channel\" && elem.name === item.name\n        ) &&\n        item.name.includes(searchValue) &&\n        searchResults.push(index)\n    );\n    setSearchText(searchValue);\n    setSearchResults(searchResults);\n  };\n\n  const onSubmitDM: (channelIndex: number) => void = (channelIndex) => {\n    let tmp = account.chatChannels;\n\n    if (\n      dataBaseChannels[channelIndex].specific === \"password\" &&\n      dataBaseChannels[channelIndex].password !== password\n    ) {\n      setPassword(\"\");\n      return;\n    }\n    dataBaseChannels[channelIndex].users.push({\n      name: account.name,\n      administrator: false,\n      mute: false,\n    });\n    tmp.push(dataBaseChannels[channelIndex]);\n    changeAccount({ chatChannels: tmp });\n    changeChat(account.chatChannels.length - 1);\n  };\n\n  return (\n    <div>\n      <br />\n      <input\n        type=\"text\"\n        value={searchText}\n        onChange={(e) => handleSearch(e.target.value)}\n      />\n      <br />\n      {searchResults.map((item) => (\n        <div>\n          <br />\n          <span>{dataBaseChannels[item].name}</span>\n          <>&nbsp;&nbsp;&nbsp;</>\n          <button\n            onClick={(e) => {\n              onSubmitDM(item);\n            }}\n          >\n            Join\n          </button>\n          <>&nbsp;&nbsp;&nbsp;</>\n          {dataBaseChannels[item].specific === \"password\" && (\n            <>\n              <label>Password: </label>\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst NewChannel: React.FC<chatProps2> = ({\n  account,\n  changeAccount,\n  changeChat,\n}) => {\n  const [name, setName] = useState<string>(\"\");\n  const [nameAlreadyInUse, setNameAlreadyInUse] = useState<boolean>(false);\n  const [specific, setSpecific] = useState<\n    \"non-block\" | \"block\" | \"public\" | \"private\" | \"password\" | \"\"\n  >(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n\n  const onSubmitChannel: () => void = () => {\n    if (\n      account.chatChannels.some(\n        (elem) => elem.dmOrChannel === \"channel\" && elem.name === name\n      ) ||\n      dataBaseChannels.some((elem) => elem.name === name)\n    ) {\n      setName(\"\");\n      setNameAlreadyInUse(true);\n    } else {\n      let newChannel = new chatChannelsClass(\n        \"channel\",\n        specific,\n        password,\n        name,\n        [],\n        account.name,\n        [{ name: account.name, administrator: true, mute: false }]\n      );\n      let tmp = account.chatChannels;\n\n      tmp.push(newChannel);\n      // dataBaseChannels.push(newChannel); //Real database should exist so that no error occurs when leaving created channel\n      changeAccount({ chatChannels: tmp });\n      changeChat(account.chatChannels.length - 1);\n      setNameAlreadyInUse(false);\n    }\n  };\n\n  const changeSpecific: (\n    newValue: \"non-block\" | \"block\" | \"public\" | \"private\" | \"password\" | \"\"\n  ) => void = (newValue) => {\n    setSpecific(newValue);\n  };\n\n  return (\n    <div>\n      <form>\n        <br />\n        <label>Channel name: </label>\n        <input\n          type=\"text\"\n          value={name}\n          name=\"channelname\"\n          onChange={(e) => setName(e.target.value)}\n          required\n        />\n        <br />\n        <br />\n        <label>public</label>\n        <input\n          type=\"radio\"\n          name=\"specific\"\n          onChange={() => changeSpecific(\"public\")}\n          required\n        />\n        <>&nbsp;&nbsp;&nbsp;</>\n        <label>private</label>\n        <input\n          type=\"radio\"\n          name=\"specific\"\n          onChange={() => changeSpecific(\"private\")}\n          required\n        />\n        <>&nbsp;&nbsp;&nbsp;</>\n        <label>password</label>\n        <input\n          type=\"radio\"\n          name=\"specific\"\n          onChange={() => changeSpecific(\"password\")}\n          required\n        />\n        <br />\n        <br />\n        {specific === \"password\" && (\n          <>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <br />\n            <br />\n          </>\n        )}\n        {nameAlreadyInUse && <p>Name already exists try another one</p>}\n        <input type=\"submit\" onClick={() => onSubmitChannel()} />\n      </form>\n    </div>\n  );\n};\n\nconst NewDM: React.FC<chatProps2> = ({\n  account,\n  changeAccount,\n  changeChat,\n}) => {\n  const [searchResults, setSearchResults] = useState<string[][]>([]);\n  const [searchText, setSearchText] = useState<string>(\"\");\n\n  const handleSearch: (searchValue: string) => void = (searchValue) => {\n    let searchResults: string[][] = [];\n\n    dataBaseAccounts.forEach(\n      (item) =>\n        searchValue.length !== 0 &&\n        !account.chatChannels.some(\n          (elem) => elem.dmOrChannel === \"dm\" && elem.name === item[0]\n        ) &&\n        item[0].includes(searchValue) &&\n        item[0] !== account.name &&\n        searchResults.push(item)\n    );\n    setSearchText(searchValue);\n    setSearchResults(searchResults);\n  };\n\n  const onSubmitDM: (name: string) => void = (name) => {\n    let tmp = account.chatChannels;\n    tmp.push(\n      new chatChannelsClass(\"dm\", \"non-block\", null, name, [], null, [\n        { name: account.name, administrator: false, mute: false },\n        { name: name, administrator: false, mute: false },\n      ])\n    );\n    changeAccount({ chatChannels: tmp });\n    changeChat(account.chatChannels.length - 1);\n  };\n\n  return (\n    <div>\n      <br />\n      <input\n        type=\"text\"\n        value={searchText}\n        onChange={(e) => handleSearch(e.target.value)}\n      />\n      <br />\n      {searchResults.map((item) => (\n        <div>\n          <br />\n          <span>{item[0]}</span>\n          <>&nbsp;&nbsp;&nbsp;</>\n          <button\n            onClick={(e) => {\n              onSubmitDM(item[0]);\n            }}\n          >\n            Start DM\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst ChatChannelsView: React.FC<chatProps> = ({ account, changeAccount }) => {\n  const [newdm, setNewdm] = useState<boolean>(false);\n  const [newchannel, setNewchannel] = useState<boolean>(false);\n  const [joinchannel, setJoinchannel] = useState<boolean>(false);\n  const [currentChat, setCurrentChat] = useState<number | null>(null);\n\n  //   const socket = useContext(SocketContext);\n\n  //   const afficher = (msg: string) =>\n  //     console.log(`Client: GOt user online msg => ${msg}`);\n\n  //   useEffect(() => {\n  //     // as soon as the component is mounted, do the following tasks:\n\n  //     // emit USER_ONLINE event\n  //     socket.emit(\"USER_ONLINE\", account.name);\n\n  //     // subscribe to socket events\n  //     socket.on(\"USER_ONLINE\", (msg: string) => {\n  //       afficher(msg);\n  //     });\n\n  //     return () => {\n  //       // before the component is destroyed\n  //       // unbind all event handlers used in this component\n  //       socket.off(\"USER_ONLINE\");\n  //     };\n  //   }, [socket]);\n\n  const changeChat: (newChat: number | null) => void = (newChat) => {\n    setNewchannel(false);\n    setNewdm(false);\n    setJoinchannel(false);\n    setCurrentChat(newChat);\n  };\n\n  if (currentChat !== null) {\n    return (\n      <Chat\n        account={account}\n        changeAccount={changeAccount}\n        changeChat={changeChat}\n        chatIndex={currentChat}\n      />\n    );\n  } else {\n    return (\n      <div>\n        {/* <button onClick={()=>{backToPage(\"home\")}}>Back</button> */}\n        <h1>Chat</h1>\n        <button\n          onClick={() => {\n            setNewdm(!newdm);\n            setNewchannel(false);\n            setJoinchannel(false);\n          }}\n        >\n          New DM\n        </button>\n        <>&nbsp;&nbsp;&nbsp;</>\n        <button\n          onClick={() => {\n            setNewchannel(!newchannel);\n            setNewdm(false);\n            setJoinchannel(false);\n          }}\n        >\n          New Channel\n        </button>\n        <>&nbsp;&nbsp;&nbsp;</>\n        <button\n          onClick={() => {\n            setJoinchannel(!joinchannel);\n            setNewchannel(false);\n            setNewdm(false);\n          }}\n        >\n          Join Channel\n        </button>\n        {newdm && (\n          <NewDM\n            account={account}\n            changeAccount={changeAccount}\n            changeChat={changeChat}\n          />\n        )}\n        {newchannel && (\n          <NewChannel\n            account={account}\n            changeAccount={changeAccount}\n            changeChat={changeChat}\n          />\n        )}\n        {joinchannel && (\n          <JoinChannel\n            account={account}\n            changeAccount={changeAccount}\n            changeChat={changeChat}\n          />\n        )}\n        <br />\n        <br />\n        {account.chatChannels.length ? (\n          account.chatChannels.map((item, index) => (\n            <p\n              onClick={() => changeChat(index)}\n            >{`${item.name} -- ${item.dmOrChannel}`}</p>\n          ))\n        ) : (\n          <p>No chats</p>\n        )}\n      </div>\n    );\n  }\n};\n\nexport default ChatChannelsView;\n\n// • Through the chat interface users should be able to ask other players to do a Pong\n// match\n// • Through the chat interface users must be able to see other players profiles\n"]},"metadata":{},"sourceType":"module"}